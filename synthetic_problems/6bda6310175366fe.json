{
  "uid": "6bda6310175366fe",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          3,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          3,
          3
        ],
        [
          3,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          3,
          3
        ],
        [
          3,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          3,
          3
        ],
        [
          3,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          3,
          3
        ],
        [
          3,
          0,
          0,
          0,
          3,
          0,
          0,
          0,
          3,
          3
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          0
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          3,
          0,
          3,
          3,
          0,
          0,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          0,
          0,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          0,
          0,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          0,
          0,
          3,
          0,
          3
        ],
        [
          3,
          0,
          3,
          3,
          0,
          0,
          3,
          0,
          3
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\n\n# concepts:\n# lines, counting\n\n# description:\n# In the input, you will see a grid with one or more vertical green lines extending from the top to the bottom of the grid.\n# To make the output, count the number of vertical green lines and create an output grid of size 1xN where N is the count of green lines, filling this row with green pixels.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n    green_line_count = 0\n\n    # Count the number of vertical green lines\n    for x in range(m):\n        if np.all(input_grid[:, x] == Color.GREEN):\n            green_line_count += 1\n\n    # Create the output grid of size 1xN where N is the green line count\n    output_grid = np.zeros((1, green_line_count), dtype=int)\n    output_grid[:, :] = Color.GREEN\n\n    return output_grid\n\ndef generate_input():\n    # Make a random grid size between 5 and 10 for width (number of columns) and fixed height of 5\n    n = 5\n    m = np.random.randint(5, 11)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Randomly decide on the number of green vertical lines (between 1 and the total number of columns)\n    num_green_lines = np.random.randint(1, m + 1)\n    green_columns = np.random.choice(m, num_green_lines, replace=False)\n\n    # Draw vertical green lines at the chosen columns\n    for col in green_columns:\n        draw_line(grid, 0, col, length=n, color=Color.GREEN, direction=(1, 0))\n\n    return grid"
}