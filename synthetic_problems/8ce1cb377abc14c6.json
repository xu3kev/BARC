{
  "uid": "8ce1cb377abc14c6",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ],
      "output": [
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ]
      ]
    },
    {
      "input": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, color, horizontal bars, counting\n\n# description:\n# The input grid consists of horizontal patterns represented by different colors.\n# Each row will contain a single color, but the number of rows with each color can vary.\n# The task is to count the number of rows of each color and perform transformations based on the counts:\n# - If a color appears in one row, that row remains unchanged.\n# - If a color appears in two rows, those rows should be replaced with a single row of the same color stretching the length of both rows.\n# - If a color appears in three or more rows, those rows should be replaced by a single row of a different specified color (e.g., GREY).\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    n, m = input_grid.shape\n    output_grid = np.zeros((n, m), dtype=int)\n    color_count = {}\n\n    for i in range(n):\n        row_color = input_grid[i, 0]  # all elements in the row are the same color\n        if row_color in color_count:\n            color_count[row_color].append(i)\n        else:\n            color_count[row_color] = [i]\n\n    new_row_index = 0\n    for color, rows in color_count.items():\n        if len(rows) == 1:\n            output_grid[new_row_index, :] = input_grid[rows[0], :]\n            new_row_index += 1\n        elif len(rows) == 2:\n            output_grid[new_row_index, :] = color\n            new_row_index += 1\n        else:\n            output_grid[new_row_index, :] = Color.GREY\n            new_row_index += 1\n    \n    # Cut off unused portion of the output grid\n    output_grid = output_grid[:new_row_index, :]\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n\n    grid = np.zeros((n, m), dtype=int)\n    colors = np.random.choice(Color.NOT_BLACK, n, replace=True)\n\n    for i in range(n):\n        grid[i, :] = colors[i]\n\n    return grid"
}