{
  "uid": "7ca10bcd4a662ed3",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          4,
          4,
          2,
          8,
          9,
          7,
          6,
          5
        ],
        [
          2,
          8,
          4,
          2,
          7,
          0,
          1,
          1
        ],
        [
          5,
          3,
          9,
          8,
          2,
          6,
          7,
          9
        ],
        [
          5,
          4,
          7,
          8,
          5,
          9,
          3,
          2
        ],
        [
          7,
          9,
          7,
          9,
          1,
          5,
          6,
          9
        ],
        [
          1,
          2,
          4,
          2,
          2,
          4,
          7,
          4
        ],
        [
          6,
          2,
          3,
          9,
          0,
          0,
          7,
          1
        ],
        [
          9,
          9,
          4,
          6,
          3,
          9,
          5,
          6
        ]
      ],
      "output": [
        [
          4,
          4,
          2,
          8,
          9,
          7,
          6,
          5
        ],
        [
          2,
          4,
          2,
          8,
          9,
          2,
          6,
          5
        ],
        [
          5,
          4,
          2,
          8,
          9,
          7,
          6,
          5
        ],
        [
          5,
          4,
          2,
          8,
          9,
          7,
          6,
          5
        ],
        [
          7,
          4,
          2,
          8,
          9,
          7,
          6,
          5
        ],
        [
          1,
          4,
          2,
          8,
          9,
          7,
          6,
          5
        ],
        [
          6,
          4,
          2,
          8,
          6,
          6,
          6,
          5
        ],
        [
          9,
          4,
          2,
          8,
          9,
          7,
          6,
          5
        ]
      ]
    },
    {
      "input": [
        [
          9,
          7,
          9,
          3,
          4,
          4,
          3
        ],
        [
          6,
          7,
          7,
          1,
          1,
          0,
          8
        ],
        [
          4,
          6,
          1,
          8,
          6,
          7,
          4
        ],
        [
          6,
          9,
          7,
          7,
          8,
          5,
          5
        ],
        [
          8,
          4,
          8,
          5,
          8,
          7,
          9
        ],
        [
          5,
          1,
          2,
          0,
          4,
          9,
          3
        ],
        [
          2,
          6,
          3,
          0,
          4,
          3,
          2
        ]
      ],
      "output": [
        [
          9,
          7,
          9,
          3,
          4,
          4,
          3
        ],
        [
          6,
          7,
          9,
          3,
          4,
          6,
          3
        ],
        [
          4,
          7,
          9,
          3,
          4,
          4,
          3
        ],
        [
          6,
          7,
          9,
          3,
          4,
          4,
          3
        ],
        [
          8,
          7,
          9,
          3,
          4,
          4,
          3
        ],
        [
          5,
          7,
          9,
          5,
          4,
          4,
          3
        ],
        [
          2,
          7,
          9,
          2,
          4,
          4,
          3
        ]
      ]
    },
    {
      "input": [
        [
          2,
          6,
          5,
          2,
          8,
          9,
          2,
          3,
          6
        ],
        [
          6,
          9,
          3,
          4,
          0,
          1,
          6,
          7,
          5
        ],
        [
          1,
          8,
          3,
          8,
          5,
          4,
          9,
          3,
          9
        ],
        [
          9,
          0,
          4,
          5,
          7,
          9,
          8,
          9,
          5
        ],
        [
          3,
          4,
          4,
          2,
          7,
          5,
          9,
          2,
          2
        ],
        [
          2,
          0,
          4,
          0,
          3,
          2,
          6,
          0,
          2
        ],
        [
          9,
          2,
          9,
          5,
          8,
          8,
          4,
          1,
          8
        ]
      ],
      "output": [
        [
          2,
          6,
          5,
          2,
          8,
          9,
          2,
          3,
          6
        ],
        [
          6,
          6,
          5,
          2,
          6,
          9,
          2,
          3,
          6
        ],
        [
          1,
          6,
          5,
          2,
          8,
          9,
          2,
          3,
          6
        ],
        [
          9,
          9,
          5,
          2,
          8,
          9,
          2,
          3,
          6
        ],
        [
          3,
          6,
          5,
          2,
          8,
          9,
          2,
          3,
          6
        ],
        [
          2,
          2,
          5,
          2,
          8,
          9,
          2,
          2,
          6
        ],
        [
          9,
          6,
          5,
          2,
          8,
          9,
          2,
          3,
          6
        ]
      ]
    },
    {
      "input": [
        [
          3,
          2,
          9,
          3,
          2,
          3,
          1,
          4,
          9
        ],
        [
          2,
          8,
          4,
          0,
          0,
          5,
          6,
          0,
          7
        ],
        [
          9,
          6,
          7,
          9,
          6,
          2,
          8,
          0,
          2
        ],
        [
          9,
          9,
          7,
          7,
          6,
          7,
          9,
          6,
          9
        ],
        [
          9,
          0,
          3,
          3,
          9,
          6,
          8,
          9,
          5
        ],
        [
          2,
          2,
          3,
          5,
          1,
          6,
          4,
          7,
          5
        ],
        [
          4,
          2,
          6,
          7,
          0,
          7,
          4,
          9,
          6
        ],
        [
          8,
          0,
          0,
          9,
          9,
          7,
          6,
          8,
          5
        ],
        [
          4,
          7,
          1,
          8,
          2,
          1,
          5,
          9,
          2
        ]
      ],
      "output": [
        [
          3,
          2,
          9,
          3,
          2,
          3,
          1,
          4,
          9
        ],
        [
          2,
          2,
          9,
          2,
          2,
          3,
          1,
          2,
          9
        ],
        [
          9,
          2,
          9,
          3,
          2,
          3,
          1,
          9,
          9
        ],
        [
          9,
          2,
          9,
          3,
          2,
          3,
          1,
          4,
          9
        ],
        [
          9,
          9,
          9,
          3,
          2,
          3,
          1,
          4,
          9
        ],
        [
          2,
          2,
          9,
          3,
          2,
          3,
          1,
          4,
          9
        ],
        [
          4,
          2,
          9,
          3,
          4,
          3,
          1,
          4,
          9
        ],
        [
          8,
          8,
          8,
          3,
          2,
          3,
          1,
          4,
          9
        ],
        [
          4,
          2,
          9,
          3,
          2,
          3,
          1,
          4,
          9
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# color guide, positioning, patterns\n\n# description:\n# In the input, you will see a grid with a colored vertical line on the leftmost column and a colored horizontal line on the topmost row. The rest of the grid will be filled with random colors or black. \n# To make the output, for each cell not in the top row or leftmost column, copy the color from the top row in the corresponding column to the cell if the cell is not black, otherwise, copy the color from the leftmost column in the corresponding row.\n  \ndef main(input_grid) -> np.ndarray:\n    n, m = input_grid.shape\n\n    # Get the guide colors\n    top_row_colors = input_grid[0, :]\n    left_col_colors = input_grid[:, 0]\n\n    # Initialize the output grid\n    output_grid = np.copy(input_grid)\n\n    # Apply the transformation according to the color guide\n    for i in range(1, n):\n        for j in range(1, m):\n            if input_grid[i, j] != Color.BLACK:\n                output_grid[i, j] = top_row_colors[j]\n            else:\n                output_grid[i, j] = left_col_colors[i]\n\n    return output_grid\n\ndef generate_input() -> np.ndarray:\n    # Randomly decide dimensions of the grid\n    n, m = np.random.randint(5, 10), np.random.randint(5, 10)\n\n    # Initialize the grid with black color\n    grid = np.full((n, m), Color.BLACK)\n\n    # Select random colors for the top row and leftmost column\n    top_row_colors = [random.choice(Color.NOT_BLACK) for _ in range(m)]\n    left_col_colors = [random.choice(Color.NOT_BLACK) for _ in range(n)]\n\n    # Fill in top row and leftmost column with the selected colors\n    grid[0, :] = top_row_colors\n    grid[:, 0] = left_col_colors\n\n    # Randomly fill remaining grid cells with black or a random color\n    for i in range(1, n):\n        for j in range(1, m):\n            grid[i, j] = random.choice(list(Color.ALL_COLORS))\n\n    return grid"
}