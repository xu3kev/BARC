{
  "uid": "89bab99d0f668307",
  "annotations": {
    "example": "good",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          4,
          0,
          8,
          0
        ],
        [
          4,
          4,
          4,
          8,
          8,
          8
        ],
        [
          4,
          4,
          0,
          8,
          8,
          0
        ],
        [
          7,
          7,
          0,
          6,
          6,
          0
        ],
        [
          7,
          7,
          0,
          0,
          6,
          0
        ],
        [
          0,
          7,
          0,
          0,
          6,
          6
        ]
      ],
      "output": [
        [
          2,
          2,
          0,
          7,
          7,
          0
        ],
        [
          0,
          2,
          0,
          7,
          7,
          0
        ],
        [
          0,
          2,
          2,
          0,
          7,
          0
        ],
        [
          0,
          9,
          0,
          0,
          0,
          3
        ],
        [
          9,
          9,
          9,
          3,
          3,
          3
        ],
        [
          9,
          9,
          0,
          3,
          3,
          0
        ]
      ]
    },
    {
      "input": [
        [
          3,
          3,
          0,
          0,
          0,
          6
        ],
        [
          3,
          3,
          3,
          0,
          0,
          6
        ],
        [
          3,
          0,
          0,
          6,
          0,
          6
        ],
        [
          7,
          7,
          7,
          0,
          4,
          0
        ],
        [
          0,
          7,
          7,
          0,
          4,
          4
        ],
        [
          0,
          0,
          7,
          0,
          4,
          4
        ]
      ],
      "output": [
        [
          0,
          3,
          0,
          7,
          7,
          7
        ],
        [
          0,
          3,
          3,
          0,
          7,
          7
        ],
        [
          0,
          3,
          3,
          0,
          0,
          7
        ],
        [
          0,
          0,
          2,
          4,
          4,
          0
        ],
        [
          0,
          0,
          2,
          4,
          4,
          4
        ],
        [
          2,
          0,
          2,
          4,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          3,
          0,
          0,
          7
        ],
        [
          0,
          3,
          3,
          0,
          0,
          0
        ],
        [
          3,
          3,
          0,
          7,
          0,
          0
        ],
        [
          0,
          0,
          5,
          9,
          0,
          9
        ],
        [
          0,
          0,
          0,
          9,
          0,
          0
        ],
        [
          5,
          5,
          5,
          9,
          9,
          9
        ]
      ],
      "output": [
        [
          8,
          0,
          8,
          0,
          0,
          1
        ],
        [
          8,
          0,
          0,
          0,
          0,
          0
        ],
        [
          8,
          8,
          8,
          1,
          1,
          1
        ],
        [
          0,
          0,
          7,
          0,
          0,
          4
        ],
        [
          0,
          0,
          0,
          0,
          4,
          4
        ],
        [
          7,
          0,
          0,
          4,
          4,
          0
        ]
      ]
    },
    {
      "input": [
        [
          5,
          5,
          5,
          0,
          0,
          0
        ],
        [
          0,
          0,
          5,
          5,
          5,
          0
        ],
        [
          0,
          0,
          5,
          0,
          0,
          0
        ],
        [
          0,
          6,
          6,
          5,
          5,
          0
        ],
        [
          0,
          0,
          0,
          5,
          0,
          0
        ],
        [
          6,
          6,
          0,
          5,
          5,
          0
        ]
      ],
      "output": [
        [
          1,
          1,
          0,
          0,
          2,
          2
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          1,
          1,
          0,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# Color mapping\ncolor_map = {Color.GREEN : Color.YELLOW, \n             Color.BLUE : Color.GRAY, \n             Color.RED : Color.PINK,\n             Color.TEAL : Color.MAROON,\n             Color.YELLOW : Color.GREEN, \n             Color.GRAY : Color.BLUE, \n             Color.PINK : Color.RED,\n             Color.MAROON : Color.TEAL             \n            }\n\ndef main(input_grid):\n    # Initialize output grid with the same dimensions as input grid\n    output_grid = np.copy(input_grid)\n\n    # Get the size of the quadrants\n    half_rows, half_cols = input_grid.shape[0] // 2, input_grid.shape[1] // 2\n\n    # Extract quadrants from the input grid\n    top_left = input_grid[:half_rows, :half_cols]\n    top_right = input_grid[:half_rows, half_cols:]\n    bottom_left = input_grid[half_rows:, :half_cols]\n    bottom_right = input_grid[half_rows:, half_cols:]\n\n    # Perform color mapping on each quadrant\n    top_left_mapped = np.vectorize(lambda color: color_map.get(color, color))(top_left)\n    top_right_mapped = np.vectorize(lambda color: color_map.get(color, color))(top_right)\n    bottom_left_mapped = np.vectorize(lambda color: color_map.get(color, color))(bottom_left)\n    bottom_right_mapped = np.vectorize(lambda color: color_map.get(color, color))(bottom_right)\n\n    # Place the mapped quadrants in their new positions\n    output_grid[half_rows:, half_cols:] = top_left_mapped\n    output_grid[half_rows:, :half_cols] = top_right_mapped\n    output_grid[:half_rows, half_cols:] = bottom_left_mapped\n    output_grid[:half_rows, :half_cols] = bottom_right_mapped\n\n    return output_grid\n    \ndef generate_input():\n    # Create a random grid of size 6x6\n    n, m = 6, 6\n    grid = np.zeros((n, m), dtype=int)\n\n    # Select random colors for each quadrant\n    colors = [np.random.choice(list(Color.NOT_BLACK)) for _ in range(4)]\n\n    # Fill each quadrant with a random pattern of the selected color\n    for i in range(n // 2):\n        for j in range(m // 2):\n            grid[i, j] = np.random.choice([colors[0], Color.BLACK])\n            grid[i, j + m // 2] = np.random.choice([colors[1], Color.BLACK])\n            grid[i + n // 2, j] = np.random.choice([colors[2], Color.BLACK])\n            grid[i + n // 2, j + m // 2] = np.random.choice([colors[3], Color.BLACK])\n\n    return grid"
}