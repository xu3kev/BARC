{
  "uid": "bb8c488e96989d3e",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          4,
          0,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          4
        ]
      ],
      "output": [
        [
          2,
          1,
          4
        ],
        [
          2,
          1,
          4
        ],
        [
          0,
          1,
          4
        ],
        [
          0,
          0,
          4
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0,
          2,
          1,
          0
        ],
        [
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          4,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          2,
          1,
          4
        ],
        [
          2,
          1,
          0
        ],
        [
          0,
          1,
          0
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          4,
          0,
          4,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          4,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          0
        ]
      ],
      "output": [
        [
          2,
          1,
          4
        ],
        [
          2,
          1,
          4
        ],
        [
          2,
          0,
          4
        ]
      ]
    },
    {
      "input": [
        [
          1,
          0,
          0,
          0,
          4,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          4,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          1,
          0,
          0,
          2
        ],
        [
          4,
          2,
          0,
          0,
          1,
          1
        ]
      ],
      "output": [
        [
          2,
          1,
          4
        ],
        [
          2,
          1,
          4
        ],
        [
          0,
          1,
          4
        ],
        [
          0,
          1,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# symmetry, alignment, colors as indicators\n\n# description:\n# In the input, you will see a grid with monochromatic squares (each of one unit length) of three different colors placed randomly. \n# To make the output, group all the squares by color and place them vertically aligned in separate columns in the output grid.\n\ndef main(input_grid):\n    # Determine the non-black colors in the grid\n    colors = [Color.RED, Color.BLUE, Color.YELLOW]\n\n    # Prepare an empty list to collect grouped squares by color\n    grouped_squares = {color: [] for color in colors}\n    \n    # Gather the coordinates of each color square\n    for color in colors:\n        coords = np.argwhere(input_grid == color)\n        grouped_squares[color] = coords\n    \n    # Calculate the dimensions of the output grid\n    output_grid_height = max(len(grouped_squares[Color.RED]), len(grouped_squares[Color.BLUE]), len(grouped_squares[Color.YELLOW]))\n    output_grid_width = 3  # Three columns for three different colors\n    \n    # Create the output grid filled with black color\n    output_grid = np.full((output_grid_height, output_grid_width), Color.BLACK, dtype=int)\n    \n    # Place squares in columns based on their color\n    for col, color in enumerate(colors):\n        for row, (x, y) in enumerate(grouped_squares[color]):\n            output_grid[row, col] = color\n\n    return output_grid\n\ndef generate_input():\n    # Create a random grid size\n    n = np.random.randint(6, 10)\n    m = np.random.randint(6, 10)\n    grid = np.full((n, m), Color.BLACK, dtype=int)\n    \n    colors = [Color.RED, Color.BLUE, Color.YELLOW]\n    \n    # Place 5-10 randomly colored squares in the grid\n    for i in range(np.random.randint(5, 11)):\n        x = np.random.randint(0, n)\n        y = np.random.randint(0, m)\n        color = np.random.choice(colors)\n        grid[x, y] = color\n    \n    return grid"
}