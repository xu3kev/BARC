{
  "uid": "86e6c1e623fb81fe",
  "annotations": {
    "example": "good",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          1,
          9,
          9,
          1,
          9,
          8,
          4,
          8,
          5,
          8
        ],
        [
          9,
          4,
          1,
          4,
          9,
          5,
          8,
          8,
          5,
          5
        ],
        [
          9,
          9,
          1,
          9,
          9,
          4,
          4,
          5,
          8,
          8
        ],
        [
          9,
          9,
          9,
          9,
          4,
          4,
          4,
          5,
          5,
          4
        ],
        [
          1,
          1,
          4,
          4,
          4,
          5,
          4,
          5,
          4,
          4
        ],
        [
          1,
          1,
          5,
          1,
          5,
          7,
          5,
          5,
          8,
          8
        ],
        [
          1,
          1,
          4,
          4,
          1,
          7,
          7,
          8,
          5,
          5
        ],
        [
          1,
          5,
          5,
          5,
          4,
          5,
          7,
          8,
          7,
          8
        ],
        [
          1,
          5,
          5,
          5,
          4,
          8,
          7,
          7,
          7,
          5
        ],
        [
          1,
          4,
          4,
          4,
          4,
          8,
          5,
          7,
          8,
          5
        ]
      ],
      "output": [
        [
          1,
          9,
          9,
          1,
          9,
          5,
          4,
          4,
          5,
          8
        ],
        [
          9,
          4,
          1,
          4,
          9,
          4,
          4,
          4,
          8,
          4
        ],
        [
          9,
          9,
          1,
          9,
          9,
          5,
          5,
          5,
          8,
          8
        ],
        [
          9,
          9,
          9,
          9,
          4,
          4,
          5,
          8,
          5,
          5
        ],
        [
          1,
          1,
          4,
          4,
          4,
          4,
          4,
          8,
          5,
          8
        ],
        [
          5,
          1,
          4,
          4,
          4,
          5,
          8,
          7,
          5,
          8
        ],
        [
          1,
          4,
          5,
          5,
          4,
          5,
          7,
          7,
          7,
          8
        ],
        [
          5,
          4,
          5,
          5,
          4,
          8,
          7,
          8,
          7,
          5
        ],
        [
          1,
          1,
          5,
          5,
          4,
          5,
          5,
          8,
          7,
          7
        ],
        [
          1,
          1,
          1,
          1,
          1,
          8,
          8,
          5,
          5,
          7
        ]
      ]
    },
    {
      "input": [
        [
          2,
          2,
          2,
          5,
          5,
          2
        ],
        [
          7,
          7,
          7,
          5,
          5,
          5
        ],
        [
          2,
          2,
          7,
          2,
          2,
          5
        ],
        [
          7,
          7,
          7,
          6,
          6,
          6
        ],
        [
          7,
          7,
          7,
          6,
          3,
          3
        ],
        [
          7,
          7,
          7,
          6,
          6,
          6
        ]
      ],
      "output": [
        [
          2,
          2,
          2,
          2,
          5,
          5
        ],
        [
          7,
          7,
          7,
          2,
          5,
          5
        ],
        [
          2,
          2,
          7,
          5,
          5,
          2
        ],
        [
          7,
          7,
          7,
          6,
          6,
          6
        ],
        [
          7,
          7,
          7,
          3,
          3,
          6
        ],
        [
          7,
          7,
          7,
          6,
          6,
          6
        ]
      ]
    },
    {
      "input": [
        [
          6,
          6,
          6,
          5,
          2,
          9,
          7,
          9
        ],
        [
          5,
          5,
          5,
          5,
          2,
          2,
          9,
          9
        ],
        [
          1,
          1,
          1,
          5,
          7,
          7,
          7,
          9
        ],
        [
          5,
          5,
          6,
          5,
          7,
          2,
          7,
          7
        ],
        [
          5,
          5,
          8,
          6,
          8,
          1,
          7,
          1
        ],
        [
          6,
          8,
          8,
          6,
          1,
          1,
          8,
          1
        ],
        [
          6,
          8,
          8,
          6,
          1,
          1,
          8,
          1
        ],
        [
          5,
          5,
          8,
          5,
          7,
          8,
          1,
          1
        ]
      ],
      "output": [
        [
          6,
          6,
          6,
          5,
          7,
          7,
          2,
          2
        ],
        [
          5,
          5,
          5,
          5,
          2,
          7,
          2,
          9
        ],
        [
          1,
          1,
          1,
          5,
          7,
          7,
          9,
          7
        ],
        [
          5,
          5,
          6,
          5,
          7,
          9,
          9,
          9
        ],
        [
          6,
          6,
          6,
          5,
          1,
          1,
          8,
          7
        ],
        [
          8,
          8,
          8,
          8,
          1,
          8,
          1,
          1
        ],
        [
          5,
          8,
          8,
          5,
          1,
          8,
          1,
          1
        ],
        [
          5,
          6,
          6,
          5,
          1,
          7,
          1,
          8
        ]
      ]
    },
    {
      "input": [
        [
          2,
          5,
          9,
          9,
          5,
          2,
          2,
          2,
          1,
          2
        ],
        [
          2,
          5,
          9,
          9,
          5,
          2,
          1,
          1,
          1,
          2
        ],
        [
          9,
          5,
          5,
          9,
          5,
          2,
          5,
          5,
          1,
          1
        ],
        [
          5,
          5,
          5,
          5,
          5,
          2,
          2,
          5,
          5,
          5
        ],
        [
          5,
          2,
          5,
          9,
          2,
          1,
          5,
          2,
          5,
          5
        ],
        [
          6,
          6,
          6,
          6,
          9,
          2,
          4,
          4,
          2,
          2
        ],
        [
          2,
          2,
          2,
          2,
          6,
          2,
          8,
          8,
          8,
          8
        ],
        [
          2,
          2,
          9,
          2,
          2,
          8,
          8,
          2,
          8,
          8
        ],
        [
          2,
          2,
          9,
          2,
          2,
          8,
          8,
          8,
          8,
          4
        ],
        [
          2,
          2,
          2,
          9,
          2,
          2,
          8,
          8,
          4,
          2
        ]
      ],
      "output": [
        [
          2,
          5,
          9,
          9,
          5,
          1,
          2,
          2,
          2,
          2
        ],
        [
          2,
          5,
          9,
          9,
          5,
          5,
          2,
          5,
          1,
          2
        ],
        [
          9,
          5,
          5,
          9,
          5,
          2,
          5,
          5,
          1,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          1,
          1,
          1
        ],
        [
          5,
          2,
          5,
          9,
          2,
          5,
          5,
          1,
          2,
          2
        ],
        [
          9,
          6,
          2,
          2,
          2,
          2,
          4,
          8,
          8,
          2
        ],
        [
          6,
          2,
          2,
          2,
          9,
          4,
          8,
          8,
          8,
          8
        ],
        [
          6,
          2,
          9,
          9,
          2,
          8,
          8,
          2,
          8,
          8
        ],
        [
          6,
          2,
          2,
          2,
          2,
          8,
          8,
          8,
          8,
          2
        ],
        [
          6,
          2,
          2,
          2,
          2,
          2,
          2,
          4,
          4,
          2
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\nimport random\n\n# concepts:\n# patterns, reflection, rotation, color\n\n# description:\n# The input grid consists of 4 color patterns (one in each quadrant). Each pattern is rotated randomly.\n# The output grid has all the quadrants adjusted such that the patterns are directed towards the central point of the grid.\n\ndef main(input_grid):\n    # Get the dimensions of the grid\n    height, width = input_grid.shape\n    half_height, half_width = height // 2, width // 2\n\n    # Extract quadrants\n    top_left = input_grid[:half_height, :half_width]\n    top_right = input_grid[:half_height, half_width:]\n    bottom_left = input_grid[half_height:, :half_width]\n    bottom_right = input_grid[half_height:, half_width:]\n\n    # Rotate quadrants to align towards the center\n    top_right = np.rot90(top_right, k=3)  # Rotate 90 degrees counter-clockwise\n    bottom_right = np.rot90(bottom_right, k=2)  # Rotate 180 degrees\n    bottom_left = np.rot90(bottom_left, k=1)  # Rotate 90 degrees clockwise\n\n    # Reconstruct the output grid\n    output_grid = np.zeros_like(input_grid)\n    output_grid[:half_height, :half_width] = top_left\n    output_grid[:half_height, half_width:] = top_right\n    output_grid[half_height:, :half_width] = bottom_left\n    output_grid[half_height:, half_width:] = bottom_right\n\n    return output_grid\n\ndef generate_input():\n    # Define the size of the grid\n    n, m = random.choice([(6, 6), (8, 8), (10, 10)])  # ensuring the grid is even-sized\n    half_n, half_m = n // 2, m // 2\n\n    # Create the full grid\n    input_grid = np.zeros((n, m), dtype=int)\n\n    # Generate a random pattern for each quadrant\n    colors = list(Color.NOT_BLACK)\n    for quadrant in [(0, 0, half_n, half_m), (0, half_m, half_n, m), (half_n, 0, n, half_m), (half_n, half_m, n, m)]:\n        x1, y1, x2, y2 = quadrant\n        pattern = random_sprite(x2-x1, y2-y1, density=1, symmetry=\"not_symmetric\", color_palette=random.sample(colors, 3))\n        pattern = np.rot90(pattern, k=random.randint(0, 3))\n        input_grid[x1:x2, y1:y2] = pattern\n\n    return input_grid"
}