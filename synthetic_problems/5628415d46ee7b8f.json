{
  "uid": "5628415d46ee7b8f",
  "annotations": {
    "example": "ok",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          7,
          9,
          7,
          5,
          6,
          5,
          9,
          3
        ],
        [
          7,
          7,
          7,
          9,
          7,
          5,
          7,
          1
        ],
        [
          7,
          5,
          7,
          7,
          4,
          5,
          2,
          7
        ],
        [
          7,
          2,
          7,
          2,
          2,
          5,
          2,
          2
        ],
        [
          7,
          4,
          7,
          9,
          8,
          5,
          7,
          4
        ],
        [
          7,
          3,
          7,
          8,
          5,
          5,
          6,
          8
        ],
        [
          7,
          9,
          7,
          8,
          8,
          5,
          4,
          5
        ],
        [
          7,
          8,
          7,
          8,
          8,
          5,
          8,
          8
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          7,
          1,
          9,
          7,
          1,
          7,
          3
        ],
        [
          3,
          5,
          1,
          7,
          4,
          1,
          2,
          3
        ],
        [
          3,
          2,
          1,
          2,
          2,
          1,
          2,
          3
        ],
        [
          3,
          4,
          1,
          9,
          8,
          1,
          7,
          3
        ],
        [
          3,
          3,
          1,
          8,
          5,
          1,
          6,
          3
        ],
        [
          3,
          9,
          1,
          8,
          8,
          1,
          4,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          4,
          1,
          2,
          9,
          6,
          1,
          8
        ],
        [
          2,
          7,
          9,
          9,
          8,
          9,
          8
        ],
        [
          9,
          9,
          8,
          9,
          9,
          6,
          8
        ],
        [
          6,
          6,
          6,
          9,
          6,
          6,
          8
        ],
        [
          4,
          7,
          4,
          9,
          8,
          8,
          8
        ],
        [
          4,
          4,
          4,
          9,
          4,
          4,
          8
        ],
        [
          2,
          8,
          5,
          9,
          5,
          4,
          8
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          7,
          9,
          1,
          8,
          9,
          3
        ],
        [
          3,
          9,
          8,
          1,
          9,
          6,
          3
        ],
        [
          3,
          6,
          6,
          1,
          6,
          6,
          3
        ],
        [
          3,
          7,
          4,
          1,
          8,
          8,
          3
        ],
        [
          3,
          4,
          4,
          1,
          4,
          4,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          5,
          5,
          5,
          5,
          3,
          5,
          5,
          5,
          5
        ],
        [
          7,
          5,
          6,
          1,
          3,
          4,
          7,
          3,
          8
        ],
        [
          1,
          1,
          9,
          3,
          3,
          5,
          2,
          4,
          6
        ],
        [
          5,
          5,
          5,
          5,
          3,
          5,
          5,
          5,
          5
        ],
        [
          1,
          5,
          3,
          5,
          3,
          1,
          8,
          7,
          8
        ],
        [
          2,
          9,
          3,
          1,
          3,
          4,
          3,
          1,
          4
        ],
        [
          4,
          1,
          7,
          4,
          3,
          9,
          6,
          8,
          1
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          5,
          6,
          1,
          1,
          4,
          7,
          3,
          3
        ],
        [
          3,
          1,
          9,
          3,
          1,
          5,
          2,
          4,
          3
        ],
        [
          3,
          5,
          5,
          5,
          1,
          5,
          5,
          5,
          3
        ],
        [
          3,
          5,
          3,
          5,
          1,
          1,
          8,
          7,
          3
        ],
        [
          3,
          9,
          3,
          1,
          1,
          4,
          3,
          1,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    },
    {
      "input": [
        [
          6,
          5,
          3,
          6,
          9,
          5,
          9,
          1,
          2
        ],
        [
          5,
          6,
          5,
          6,
          9,
          9,
          7,
          6,
          2
        ],
        [
          6,
          8,
          9,
          4,
          1,
          7,
          7,
          6,
          2
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          2
        ],
        [
          4,
          8,
          3,
          5,
          7,
          2,
          6,
          3,
          2
        ],
        [
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          2
        ],
        [
          8,
          9,
          7,
          9,
          4,
          1,
          6,
          1,
          2
        ],
        [
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          2
        ],
        [
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          2
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ],
        [
          3,
          6,
          5,
          6,
          9,
          9,
          7,
          6,
          3
        ],
        [
          3,
          8,
          9,
          4,
          1,
          7,
          7,
          6,
          3
        ],
        [
          3,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          3
        ],
        [
          3,
          8,
          3,
          5,
          7,
          2,
          6,
          3,
          3
        ],
        [
          3,
          7,
          7,
          7,
          7,
          7,
          7,
          7,
          3
        ],
        [
          3,
          9,
          7,
          9,
          4,
          1,
          6,
          1,
          3
        ],
        [
          3,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          3
        ],
        [
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          3
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# borders, patterns, horizontal bars\n\n# description:\n# In the input, you will see a grid with various horizontal or vertical stripes of different colors.\n# For each stripe: If the stripe is horizontal, convert the stripe to all red.\n# If the stripe is vertical, convert the stripe to all blue.\n# If any repetitive pattern (group of same color) in the stripe is longer than half the length/height of the grid, also add a green border (thickness 1 pixel) around the grid.\n\ndef main(input_grid):\n    n, m = input_grid.shape\n    output_grid = np.copy(input_grid)\n    \n    add_green_border = False\n    \n    for i in range(n):\n        if np.all(output_grid[i, :] == output_grid[i, 0]):\n            output_grid[i, :] = Color.RED  # Horizontal stripe\n            if np.sum(output_grid[i, :] != Color.BLACK) > m // 2:\n                add_green_border = True\n    \n    for j in range(m):\n        if np.all(output_grid[:, j] == output_grid[0, j]):\n            output_grid[:, j] = Color.BLUE  # Vertical stripe\n            if np.sum(output_grid[:, j] != Color.BLACK) > n // 2:\n                add_green_border = True\n\n    if add_green_border:\n        draw_line(grid=output_grid, x=0, y=0, length=n, color=Color.GREEN, direction=(1,0))\n        draw_line(grid=output_grid, x=0, y=m-1, length=n, color=Color.GREEN, direction=(1,0))\n        draw_line(grid=output_grid, x=0, y=0, length=m, color=Color.GREEN, direction=(0,1))\n        draw_line(grid=output_grid, x=n-1, y=0, length=m, color=Color.GREEN, direction=(0,1))\n\n    return output_grid\n\n\ndef generate_input():\n    # Generate a random n x m grid\n    n = np.random.randint(5, 10)\n    m = np.random.randint(5, 10)\n    grid = np.random.choice(list(Color.NOT_BLACK), size=(n, m))\n    \n    # Randomly decide rows or columns for stripes\n    for i in range(n):\n        if np.random.rand() < 0.3:\n            grid[i, :] = np.random.choice(list(Color.NOT_BLACK))\n\n    for j in range(m):\n        if np.random.rand() < 0.3:\n            grid[:, j] = np.random.choice(list(Color.NOT_BLACK))\n\n    return grid"
}