{
  "uid": "2b6311a5aedafaff",
  "annotations": {
    "example": "bad",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          1
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          2,
          2,
          2,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# translational symmetry, symmetry detection, pixel manipulation, objects\n\n# description:\n# In the input you will see a grid consisting of two different colored sprites (red and blue) that are repeatedly translated diagonally, forming a pattern of alternating sprites.\n# To make the output:\n# 1. Detect the translational symmetry of each sprite separately\n# 2. Expand the grid to be a perfect square (the larger of width or height)\n# 3. Continue the pattern of alternating sprites in both directions (up-left and down-right)\n# 4. For each sprite, count the number of complete sprites of that color in the expanded grid\n# 5. If the count of red sprites is greater, change all blue sprites to green. If the count of blue sprites is greater, change all red sprites to yellow. If counts are equal, leave colors unchanged.\n\ndef main(input_grid):\n    # Plan:\n    # 1. Separate red and blue sprites\n    # 2. Find the repeated translation for each color\n    # 3. Expand the grid to a square\n    # 4. Continue the pattern in both directions\n    # 5. Count complete sprites of each color\n    # 6. Change colors based on the count\n\n    red_grid = np.where(input_grid == Color.RED, Color.RED, Color.BLACK)\n    blue_grid = np.where(input_grid == Color.BLUE, Color.BLUE, Color.BLACK)\n\n    red_symmetries = detect_translational_symmetry(red_grid, ignore_colors=[Color.BLACK])\n    blue_symmetries = detect_translational_symmetry(blue_grid, ignore_colors=[Color.BLACK])\n\n    assert len(red_symmetries) > 0 and len(blue_symmetries) > 0, \"No translational symmetry found\"\n\n    # Expand to square grid\n    new_size = max(input_grid.shape[0], input_grid.shape[1])\n    output_grid = np.full((new_size, new_size), Color.BLACK)\n\n    # Continue pattern in both directions\n    for color, symmetries in [(Color.RED, red_symmetries), (Color.BLUE, blue_symmetries)]:\n        for x, y in np.argwhere(input_grid == color):\n            for x2, y2 in orbit(output_grid, x, y, symmetries):\n                if 0 <= x2 < new_size and 0 <= y2 < new_size:\n                    output_grid[x2, y2] = color\n\n    # Count complete sprites\n    red_sprite = find_connected_components(red_grid, monochromatic=True)[0]\n    blue_sprite = find_connected_components(blue_grid, monochromatic=True)[0]\n\n    red_count = count_complete_sprites(output_grid, red_sprite, Color.RED)\n    blue_count = count_complete_sprites(output_grid, blue_sprite, Color.BLUE)\n\n    # Change colors based on count\n    if red_count > blue_count:\n        output_grid[output_grid == Color.BLUE] = Color.GREEN\n    elif blue_count > red_count:\n        output_grid[output_grid == Color.RED] = Color.YELLOW\n\n    return output_grid\n\ndef count_complete_sprites(grid, sprite, color):\n    count = 0\n    for x in range(grid.shape[0] - sprite.shape[0] + 1):\n        for y in range(grid.shape[1] - sprite.shape[1] + 1):\n            if np.all(grid[x:x+sprite.shape[0], y:y+sprite.shape[1]] == sprite):\n                count += 1\n    return count\n\ndef generate_input():\n    # Grid size between 5x5 and 10x10\n    n, m = np.random.randint(5, 11), np.random.randint(5, 11)\n    grid = np.full((n, m), Color.BLACK)\n\n    # Create two sprites: red and blue\n    red_sprite = random_sprite(np.random.randint(2, 4), np.random.randint(2, 4), \n                               symmetry=\"not_symmetric\", color_palette=[Color.RED], density=0.6)\n    blue_sprite = random_sprite(np.random.randint(2, 4), np.random.randint(2, 4), \n                                symmetry=\"not_symmetric\", color_palette=[Color.BLUE], density=0.6)\n\n    # Place sprites in a diagonal pattern\n    x, y = 0, 0\n    while x < n and y < m:\n        if np.random.choice([True, False]):\n            blit_sprite(grid, red_sprite, x, y)\n            x += red_sprite.shape[0]\n            y += red_sprite.shape[1]\n        else:\n            blit_sprite(grid, blue_sprite, x, y)\n            x += blue_sprite.shape[0]\n            y += blue_sprite.shape[1]\n\n    return grid"
}