{
  "uid": "cfdba6569d5bb305",
  "annotations": {
    "example": "ok",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng2_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ],
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ],
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ],
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ],
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ],
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ],
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ],
        [
          6,
          2,
          5,
          6,
          2,
          5,
          6,
          2
        ]
      ],
      "output": [
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ],
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ],
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ],
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ],
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ],
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ],
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ],
        [
          2,
          6,
          1,
          2,
          6,
          1,
          2,
          6
        ]
      ]
    },
    {
      "input": [
        [
          3,
          2,
          8,
          3,
          2,
          8,
          3
        ],
        [
          3,
          2,
          8,
          3,
          2,
          8,
          3
        ],
        [
          3,
          2,
          8,
          3,
          2,
          8,
          3
        ],
        [
          3,
          2,
          8,
          3,
          2,
          8,
          3
        ],
        [
          3,
          2,
          8,
          3,
          2,
          8,
          3
        ],
        [
          3,
          2,
          8,
          3,
          2,
          8,
          3
        ],
        [
          3,
          2,
          8,
          3,
          2,
          8,
          3
        ]
      ],
      "output": [
        [
          4,
          6,
          9,
          4,
          6,
          9,
          4
        ],
        [
          4,
          6,
          9,
          4,
          6,
          9,
          4
        ],
        [
          4,
          6,
          9,
          4,
          6,
          9,
          4
        ],
        [
          4,
          6,
          9,
          4,
          6,
          9,
          4
        ],
        [
          4,
          6,
          9,
          4,
          6,
          9,
          4
        ],
        [
          4,
          6,
          9,
          4,
          6,
          9,
          4
        ],
        [
          4,
          6,
          9,
          4,
          6,
          9,
          4
        ]
      ]
    },
    {
      "input": [
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ],
        [
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8,
          8
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ]
      ]
    },
    {
      "input": [
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ],
        [
          5,
          4,
          1,
          5,
          4,
          1,
          5,
          4,
          1
        ]
      ],
      "output": [
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ],
        [
          1,
          3,
          5,
          1,
          3,
          5,
          1,
          3,
          5
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, color mapping, reflection\n\n# description:\n# In the input grid, there will be patterns of vertical stripes of various colors. Some stripes might be reflected horizontally or vertically.\n# To create the output, first identify the base stripe pattern without any reflections. Then, apply a color mapping to the identified base pattern.\n\ndef main(input_grid):\n    # Get the size of the input grid\n    n, m = input_grid.shape\n\n    # Find the period of the vertical stripes\n    for period in range(1, m):\n        base_pattern = input_grid[:, :period]\n        repetitions = [input_grid[:, i*period:(i+1)*period] for i in range(m // period)]\n\n        # Check if every repetition matches the base pattern or its reflections\n        is_valid = all(any(np.array_equal(rep, np.flip(base_pattern, axis)) for rep in repetitions for axis in [None, 0, 1]) for rep in repetitions)\n        \n        if is_valid:\n            break\n\n    # Apply the color mapping to the base pattern\n    output_grid = input_grid.copy()\n    output_grid = np.vectorize(lambda color: color_map.get(color, color))(output_grid)\n    \n    return output_grid\n\n\ncolor_map = {\n    Color.GREEN: Color.YELLOW,\n    Color.BLUE: Color.GRAY,\n    Color.RED: Color.PINK,\n    Color.TEAL: Color.MAROON,\n    Color.YELLOW: Color.GREEN,\n    Color.GRAY: Color.BLUE,\n    Color.PINK: Color.RED,\n    Color.MAROON: Color.TEAL\n}\n\n\ndef generate_input():\n    # Create random stripe pattern, ensuring vertical stripes and possible reflections\n    height = np.random.randint(5, 10)\n    width = np.random.randint(5, 10)\n    period = np.random.randint(2, (width // 2) + 1)\n    base_pattern = np.zeros((height, period), dtype=int)\n    \n    for col in range(period):\n        color = np.random.choice(list(color_map.keys()))\n        base_pattern[:, col] = color\n    \n    grid = np.tile(base_pattern, (1, width // period + 1))[:, :width]\n    \n    # Apply random reflections\n    if np.random.rand() < 0.5:\n        grid = np.flip(grid, axis=0)  # Horizontal reflection\n    if np.random.rand() < 0.5:\n        grid = np.flip(grid, axis=1)  # Vertical reflection\n\n    return grid"
}