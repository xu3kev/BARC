{
  "uid": "b979b11c626b04fa",
  "annotations": {
    "example": "ok",
    "code": "ok"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_6_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          6,
          5,
          3
        ],
        [
          6,
          5,
          3
        ],
        [
          6,
          5,
          3
        ]
      ],
      "output": [
        [
          6,
          5,
          3
        ],
        [
          6,
          5,
          3
        ],
        [
          6,
          5,
          3
        ],
        [
          6,
          5,
          3
        ],
        [
          6,
          5,
          3
        ],
        [
          6,
          5,
          3
        ]
      ]
    },
    {
      "input": [
        [
          6,
          1,
          4,
          2,
          4
        ],
        [
          5,
          5,
          1,
          3,
          2
        ],
        [
          5,
          6,
          9,
          9,
          6
        ],
        [
          5,
          6,
          9,
          9,
          6
        ],
        [
          5,
          5,
          1,
          3,
          2
        ],
        [
          6,
          1,
          4,
          2,
          4
        ]
      ],
      "output": [
        [
          6,
          1,
          4,
          2,
          4
        ],
        [
          5,
          5,
          1,
          3,
          2
        ],
        [
          5,
          6,
          9,
          9,
          6
        ],
        [
          5,
          6,
          9,
          9,
          6
        ],
        [
          5,
          5,
          1,
          3,
          2
        ],
        [
          6,
          1,
          4,
          2,
          4
        ],
        [
          6,
          1,
          4,
          2,
          4
        ],
        [
          5,
          5,
          1,
          3,
          2
        ],
        [
          5,
          6,
          9,
          9,
          6
        ],
        [
          5,
          6,
          9,
          9,
          6
        ],
        [
          5,
          5,
          1,
          3,
          2
        ],
        [
          6,
          1,
          4,
          2,
          4
        ]
      ]
    },
    {
      "input": [
        [
          8,
          6,
          3,
          8
        ],
        [
          8,
          6,
          3,
          8
        ],
        [
          8,
          6,
          3,
          8
        ]
      ],
      "output": [
        [
          8,
          6,
          3,
          8
        ],
        [
          8,
          6,
          3,
          8
        ],
        [
          8,
          6,
          3,
          8
        ],
        [
          8,
          6,
          3,
          8
        ],
        [
          8,
          6,
          3,
          8
        ],
        [
          8,
          6,
          3,
          8
        ]
      ]
    },
    {
      "input": [
        [
          2,
          5,
          5,
          4
        ],
        [
          8,
          4,
          8,
          7
        ],
        [
          9,
          2,
          3,
          6
        ],
        [
          9,
          2,
          3,
          6
        ],
        [
          8,
          4,
          8,
          7
        ],
        [
          2,
          5,
          5,
          4
        ]
      ],
      "output": [
        [
          2,
          5,
          5,
          4
        ],
        [
          8,
          4,
          8,
          7
        ],
        [
          9,
          2,
          3,
          6
        ],
        [
          9,
          2,
          3,
          6
        ],
        [
          8,
          4,
          8,
          7
        ],
        [
          2,
          5,
          5,
          4
        ],
        [
          2,
          5,
          5,
          4
        ],
        [
          8,
          4,
          8,
          7
        ],
        [
          9,
          2,
          3,
          6
        ],
        [
          9,
          2,
          3,
          6
        ],
        [
          8,
          4,
          8,
          7
        ],
        [
          2,
          5,
          5,
          4
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# patterns, symmetry, mirroring, reflection, color\n\n# description:\n# In the input, you will see a random colorful pattern that may have a vertical or horizontal symmetry axis.\n# To make the output, identify whether the pattern has vertical or horizontal symmetry. \n# Mirror the pattern along its symmetry axis to create a complete symmetric figure.\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    n, m = input_grid.shape\n    \n    # Check for vertical symmetry\n    is_vertically_symmetric = np.all(input_grid == input_grid[:, ::-1])\n\n    # Check for horizontal symmetry\n    is_horizontally_symmetric = np.all(input_grid == input_grid[::-1, :])\n\n    # Mirror according to the found symmetry or return the original if no symmetry\n    if is_vertically_symmetric:\n        mirrored_grid = np.concatenate((input_grid, input_grid[:, ::-1]), axis=1)\n    elif is_horizontally_symmetric:\n        mirrored_grid = np.concatenate((input_grid, input_grid[::-1, :]), axis=0)\n    else:\n        mirrored_grid = np.copy(input_grid)\n\n    return mirrored_grid\n\ndef generate_input() -> np.ndarray:\n    n, m = np.random.randint(3, 7, size=2)\n    grid = np.zeros((n, m), dtype=int)\n\n    # Decide on the type of symmetry: vertical, horizontal, or none\n    symmetry_type = np.random.choice([\"vertical\", \"horizontal\", \"none\"])\n\n    if symmetry_type == \"vertical\":\n        half_grid = np.random.choice(Color.NOT_BLACK, size=(n, m // 2))\n        grid[:, :m // 2] = half_grid\n        grid[:, m // 2:] = half_grid[:, ::-1]\n    elif symmetry_type == \"horizontal\":\n        half_grid = np.random.choice(Color.NOT_BLACK, size=(n // 2, m))\n        grid[:n // 2] = half_grid\n        grid[n // 2:] = half_grid[::-1, :]\n    else:\n        grid = np.random.choice(Color.NOT_BLACK, size=(n, m))\n\n    return grid"
}