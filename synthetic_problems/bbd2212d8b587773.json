{
  "uid": "bbd2212d8b587773",
  "annotations": {
    "example": "ok",
    "code": "bad"
  },
  "metadata": {
    "source_file": "self_instruct_remix1_fewshot_4_anthropic_claude-3.5-sonnet:beta_temp1.00_maxtokens2048_rng0_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          2,
          2,
          2
        ],
        [
          0,
          0,
          2
        ],
        [
          2,
          2,
          2
        ]
      ],
      "output": [
        [
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0,
          2
        ],
        [
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          2
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          2,
          2
        ],
        [
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0,
          2
        ],
        [
          2,
          0,
          2,
          2,
          0,
          2,
          2,
          0,
          2
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          7
        ],
        [
          0,
          0,
          6
        ],
        [
          9,
          9,
          8
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          9,
          8
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          7
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          6
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          9,
          9,
          8
        ],
        [
          0,
          0,
          7,
          0,
          0,
          7,
          0,
          0,
          7
        ],
        [
          0,
          0,
          6,
          0,
          0,
          6,
          0,
          0,
          6
        ],
        [
          9,
          9,
          8,
          9,
          9,
          8,
          9,
          9,
          8
        ]
      ]
    },
    {
      "input": [
        [
          9,
          9,
          9
        ],
        [
          9,
          0,
          9
        ],
        [
          3,
          4,
          3
        ]
      ],
      "output": [
        [
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9,
          9
        ],
        [
          9,
          0,
          9,
          9,
          0,
          9,
          9,
          0,
          9
        ],
        [
          3,
          4,
          3,
          3,
          4,
          3,
          3,
          4,
          3
        ],
        [
          9,
          9,
          9,
          0,
          0,
          0,
          9,
          9,
          9
        ],
        [
          9,
          0,
          9,
          0,
          0,
          0,
          9,
          0,
          9
        ],
        [
          3,
          4,
          3,
          0,
          0,
          0,
          3,
          4,
          3
        ],
        [
          9,
          9,
          3,
          9,
          9,
          9,
          9,
          9,
          3
        ],
        [
          9,
          0,
          4,
          9,
          0,
          9,
          9,
          0,
          4
        ],
        [
          9,
          9,
          3,
          3,
          4,
          3,
          9,
          9,
          3
        ]
      ]
    },
    {
      "input": [
        [
          0,
          2,
          0
        ],
        [
          2,
          2,
          2
        ],
        [
          0,
          2,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          2,
          0,
          0,
          2,
          0,
          0,
          2,
          0
        ],
        [
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2,
          2
        ],
        [
          0,
          2,
          0,
          0,
          2,
          0,
          0,
          2,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          2,
          2,
          2,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          0
        ]
      ]
    }
  ],
  "code": "from common import *\n\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# repeating patterns, scaling, symmetry, colors as indicators\n\n# description:\n# In the input, you will see a nxn sprite with a black background and colored pixels.\n# Construct an output grid with 3n x 3n black pixels. Divide the output grid into 3x3 subgrids.\n# For each subgrid, look at the corresponding pixel in the nxn input grid:\n# - If the pixel is black, leave the subgrid black.\n# - If the pixel is colored, copy a rotated version of the input grid into the subgrid:\n#   - For red pixels, rotate 90 degrees clockwise\n#   - For blue pixels, rotate 180 degrees\n#   - For green pixels, rotate 270 degrees clockwise\n#   - For any other color, don't rotate (0 degrees)\n\ndef main(input_grid):\n    n = input_grid.shape[0]\n    output_grid = np.zeros((3*n, 3*n), dtype=int)\n\n    for i in range(n):\n        for j in range(n):\n            if input_grid[i, j] != Color.BLACK:\n                subgrid = np.copy(input_grid)\n                \n                # Rotate based on color\n                if input_grid[i, j] == Color.RED:\n                    subgrid = np.rot90(subgrid, k=3)  # 90 degrees clockwise\n                elif input_grid[i, j] == Color.BLUE:\n                    subgrid = np.rot90(subgrid, k=2)  # 180 degrees\n                elif input_grid[i, j] == Color.GREEN:\n                    subgrid = np.rot90(subgrid, k=1)  # 270 degrees clockwise\n                # For any other color, no rotation (0 degrees)\n                \n                # Copy the rotated subgrid into the output grid\n                output_grid[3*i:3*i+n, 3*j:3*j+n] = subgrid\n\n    return output_grid\n\ndef generate_input():\n    n = random.randint(3, 6)\n    color_palette = [Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW, Color.GREY, Color.PINK, Color.ORANGE, Color.TEAL, Color.MAROON]\n    return random_sprite(n, n, color_palette=color_palette, density=0.3)"
}