{
  "uid": "d30d2cc042f89905",
  "annotations": {
    "example": "good",
    "code": "good"
  },
  "metadata": {
    "source_file": "self_instruct_remix0_fewshot_4_gpt-4o_temp1.00_maxtokens2048_rng3_briefcommon_generated_problems.jsonl"
  },
  "examples": [
    {
      "input": [
        [
          0,
          0,
          0,
          3,
          0
        ],
        [
          0,
          0,
          0,
          3,
          3
        ],
        [
          0,
          0,
          0,
          3,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          7,
          3,
          7,
          0,
          0,
          7,
          3,
          7
        ],
        [
          0,
          0,
          7,
          3,
          3,
          7,
          0,
          7,
          3,
          3
        ],
        [
          0,
          0,
          7,
          3,
          7,
          0,
          0,
          7,
          3,
          7
        ],
        [
          0,
          0,
          7,
          3,
          7,
          0,
          0,
          7,
          3,
          7
        ],
        [
          0,
          0,
          7,
          3,
          3,
          7,
          0,
          7,
          3,
          3
        ],
        [
          0,
          0,
          7,
          3,
          7,
          0,
          0,
          7,
          3,
          7
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          3
        ],
        [
          0,
          0,
          0
        ],
        [
          0,
          3,
          0
        ],
        [
          0,
          3,
          0
        ]
      ],
      "output": [
        [
          0,
          7,
          3,
          7,
          7,
          3
        ],
        [
          0,
          7,
          7,
          0,
          7,
          7
        ],
        [
          7,
          3,
          7,
          7,
          3,
          7
        ],
        [
          7,
          3,
          7,
          7,
          3,
          7
        ],
        [
          0,
          7,
          3,
          7,
          7,
          3
        ],
        [
          0,
          7,
          7,
          0,
          7,
          7
        ],
        [
          7,
          3,
          7,
          7,
          3,
          7
        ],
        [
          7,
          3,
          7,
          7,
          3,
          7
        ]
      ]
    },
    {
      "input": [
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ],
        [
          0,
          3,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0
        ]
      ],
      "output": [
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          7,
          0,
          0
        ],
        [
          7,
          3,
          7,
          0,
          7,
          3,
          7,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          7,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          7,
          0,
          0
        ],
        [
          7,
          3,
          7,
          0,
          7,
          3,
          7,
          0
        ],
        [
          0,
          7,
          0,
          0,
          0,
          7,
          0,
          0
        ]
      ]
    },
    {
      "input": [
        [
          3,
          3
        ],
        [
          0,
          0
        ]
      ],
      "output": [
        [
          3,
          3,
          3,
          3
        ],
        [
          7,
          7,
          7,
          7
        ],
        [
          3,
          3,
          3,
          3
        ],
        [
          7,
          7,
          7,
          7
        ]
      ]
    }
  ],
  "code": "from common import *\nimport numpy as np\nfrom typing import *\n\n# concepts:\n# Coloring adjacent pixels, repetition\n\n# description:\n# Given an input grid of arbitrary size, with some small number of colored pixels on it.\n# To produce the output, replicate the input grid 4 times, 2 on the top and 2 on the bottom.\n# Color all the adjacent pixels (up, down, left, right) orange if they are black and adjacent to a green pixel.\n\ndef main(input_grid):\n    # Replicate input grid 4 times to initialize output grid\n    output_grid = np.zeros((2 * input_grid.shape[0], 2 * input_grid.shape[1]), dtype=int)\n    for i in range(2):\n        for j in range(2):\n            blit_sprite(output_grid, input_grid, i * input_grid.shape[0], j * input_grid.shape[1])\n\n    # Create adjacent directions\n    adjacent_directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    # Color adjacent pixels orange if they are black and adjacent to a green pixel\n    for y in range(output_grid.shape[1]):\n        for x in range(output_grid.shape[0]):\n            if output_grid[x, y] == Color.GREEN:\n                for dx, dy in adjacent_directions:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < output_grid.shape[0] and 0 <= ny < output_grid.shape[1] and output_grid[nx, ny] == Color.BLACK:\n                        output_grid[nx, ny] = Color.ORANGE\n    \n    return output_grid\n\ndef generate_input():\n    # Random size of input grid\n    n, m = np.random.randint(2, 6), np.random.randint(2, 6)\n\n    # Initialize grid\n    grid = np.zeros((n, m), dtype=int)\n\n    # Have 1 to 4 number of green colored pixels in the initial square\n    n_colored_pixels = np.random.randint(1, 5)\n\n    # Create a dummy sprite with one green pixel.\n    sprite = np.array([Color.GREEN]).reshape(1, 1)\n\n    # Randomly place n_colored_pixels in the grid\n    for _ in range(n_colored_pixels):\n        x, y = random_free_location_for_sprite(grid, sprite)\n        blit_sprite(grid, sprite, x, y)\n\n    return grid"
}